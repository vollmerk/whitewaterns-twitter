#!/usr/bin/env python
# vim: set softtabstop=2 ts=2 sw=2 expandtab: 
#
# Copyright (c) 2016 Karl Vollmer (karl.vollmer@gmail.com)
#
import numpy as np,sys,tempfile
import pygrib
import urllib
import json
from datetime import datetime, timedelta

"""
 Lons are + always, so -63 == 297 (360-63)
 This script expects to always get the significant wave+swell height, and will then go back
 and grab period and direction for same area SWDIR and SWPER
 FIXME: Should accept additional arguments, of lat/lon constraint
 For the source we have to set the date string part cause :( 
"""
heightsource = sys.argv[1] + '_' + datetime.now().strftime("%Y%m%d") + '00_P000.grib2'
try:
  source = urllib.urlopen(heightsource)
except:
  """ Try yesterday """
  day = datetime.now() - timedelta(days=1)
  heightsource = sys.argv[1] + '_' + day.strftime("%Y%m%d") + '00_P000.grib2'
  source = urllib.urlopen(heightsource)

dirsource = heightsource.replace("HTSGW_","SWDIR_")
persource = heightsource.replace("HTSGW_","SWPER_")
tmpfile = tempfile.NamedTemporaryFile()
tmpfile.write(source.read())
tmpfile.read()

wavelevels = []
grbs = pygrib.open(tmpfile.name)
for grb in grbs:
  data, lats, lons = grb.data(lat1=44.3,lat2=44.6,lon1=297,lon2=297.3)
  for row in data:
    wavelevels.append(np.mean(row))

level = round(np.mean(wavelevels),2)

source = urllib.urlopen(dirsource)
tmpfile = tempfile.NamedTemporaryFile()
tmpfile.write(source.read())
tmpfile.read()

wavedirs = []
grbs = pygrib.open(tmpfile.name)
for grb in grbs:
  data, lats, lons = grb.data(lat1=44.3,lat2=44.6,lon1=297,lon2=297.3)
  for row in data:
    wavedirs.append(np.mean(row))

direction = round(np.mean(wavedirs),2)

source = urllib.urlopen(persource)
tmpfile = tempfile.NamedTemporaryFile()
tmpfile.write(source.read())
tmpfile.read()

waveper = []
grbs = pygrib.open(tmpfile.name)
for grb in grbs:
  data, lats, lons = grb.data(lat1=44.3,lat2=44.6,lon1=297,lon2=297.3)
  for row in data:
    waveper.append(np.mean(row))

period = round(np.mean(waveper),2)

cardinalarray = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE","S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"]
cardinalkey = int((direction)/22.5)
cardinal = cardinalarray[cardinalkey % 16]

level_info = 'm %s at %s seconds' % (cardinal,period)

print json.dumps({'level':level,'level_type':'surf','level_info':level_info,'direction':direction,'period':period})
